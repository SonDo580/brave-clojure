(ns functional-programming.pegthing
  (require [clojure.set :as set])
  (:require [clojure.string :as str]))

(declare successful-move invalid-move prompt-move game-over prompt-rows)

;; Board representations
;; {1  {:pegged true, :connections {6 3, 4 2}},
;;  2  {:pegged true, :connections {9 5, 7 4}},
;;  3  {:pegged true, :connections {10 6, 8 5}},
;;  4  {:pegged true, :connections {13 8, 11 7, 6 5, 1 2}},
;;  5  {:pegged true, :connections {14 9, 12 8}},
;;  6  {:pegged true, :connections {15 10, 13 9, 4 5, 1 3}},
;;  7  {:pegged true, :connections {9 8, 2 4}},
;;  8  {:pegged true, :connections {10 9, 3 5}},
;;  9  {:pegged true, :connections {7 8, 2 5}},
;;  10 {:pegged true, :connections {8 9, 3 6}},
;;  11 {:pegged true, :connections {13 12, 4 7}},
;;  12 {:pegged true, :connections {14 13, 5 8}},
;;  13 {:pegged true, :connections {15 14, 11 12, 6 9, 4 8}},
;;  14 {:pegged true, :connections {12 13, 5 9}},
;;  15 {:pegged true, :connections {13 14, 6 10}},
;;  :rows 5}

;; pegged: whether the position has a peg in it
;; connections: a legal destination, and the position that would be jumped over
;; rows: number of rows of the pegboard

;;         01
;;       02  03
;;     04  05  06
;;   07  08  09  10
;; 11  12  13  14  15

;;;;
;; Create the board
;;;;

(defn tri*
  "Generates lazy sequence of triangular numbers"
  ([] (tri* 0 1))
  ([sum n]
   (let [new-sum (+ sum n)]
     (cons new-sum (lazy-seq (tri* new-sum (inc n)))))))
;; Triangular numbers are generated by adding the first n natural numbers
;; 1 -> 3 -> 6 -> ...
;; These numbers line up with the position numbers at the end of every row of the board 

;; Bind the lazy sequence to 'tri'
(def tri (tri*))

;; (take 5 tri)
; => (1 3 6 10 15)

(defn triangular?
  "Check if a number is triangular"
  [n]
  (= n (last (take-while #(>= n %) tri))))

;; (triangular? 5)
; => false
;; (triangular? 6)
;; ; => true

(defn row-tri
  "The triangular number at the end of row n"
  [n]
  (last (take n tri)))

;; (row-tri 1)
; => 1
;; (row-tri 2)
; => 3

(defn row-num
  "Returns row number of the position"
  [pos]
  (inc (count (take-while #(> pos %) tri))))

;; (row-num 1)
; => 1
;; (row-num 5)
; => 3

(defn connect
  "Form a mutual connection between 2 position"
  [board max-pos pos neighbor destination]
  (if (> destination max-pos)
    board
    (reduce (fn [new-board [p1 p2]]
              (assoc-in new-board [p1 :connections p2] neighbor))
            board
            [[pos destination] [destination pos]])))

;; (connect {} 15 1 2 4)
; => {1 {:connections {4 2}}
;     4 {:connections {1 2}}}

(defn connect-right
  [board max-pos pos]
  (let [neighbor (inc pos)
        destination (inc neighbor)]
    (if (or (triangular? pos) (triangular? neighbor))
      board
      (connect board max-pos pos neighbor destination))))

(defn connect-down-left
  [board max-pos pos]
  (let [row (row-num pos)
        neighbor (+ row pos)
        destination (+ 1 row neighbor)]
    (connect board max-pos pos neighbor destination)))

;; (connect-down-left {} 15 1)
; => {1 {:connections {4 2}
;     4 {:connections {1 2}}}

(defn connect-down-right
  [board max-pos pos]
  (let [row (row-num pos)
        neighbor (+ 1 row pos)
        destination (+ 2 row neighbor)]
    (connect board max-pos pos neighbor destination)))

;; (connect-down-right {} 15 3)
; => {3  {:connections {10 6}}
;     10 {:connections {3 6}}}

(defn add-pos
  "Put peg in the position and form connections"
  [board max-pos pos]
  (let [pegged-board (assoc-in board [pos :pegged] true)]
    (reduce (fn [new-board connection-creation-fn]
              (connection-creation-fn new-board max-pos pos))
            pegged-board
            [connect-right connect-down-left connect-down-right])))

;; (add-pos {} 15 1)
;; {1 {:connections {6 3, 4 2}, :pegged true}
;;  4 {:connections {1 2}}
;;  6 {:connections {1 3}}}

(defn new-board
  "Create a new board with the given number of rows"
  [rows]
  (let [initial-board {:rows rows}
        max-pos (row-tri rows)]
    (reduce (fn [board pos]
              (add-pos board max-pos pos))
            initial-board
            (range 1 (inc max-pos)))))

;;;;
;; Move pegs
;;;;

(defn pegged?
  "Does the position have a peg?"
  [board pos]
  (get-in board [pos :pegged]))

(defn remove-peg
  "Take the peg at the given position out of the board"
  [board pos]
  (assoc-in board [pos :pegged] false))

(defn place-peg
  "Put a peg in the board at the given position"
  [board pos]
  (assoc-in board [pos :pegged] true))

(defn move-peg
  "Take a peg out of p1 and place it in p2"
  [board p1 p2]
  (place-peg (remove-peg board p1) p2))

(defn valid-moves
  "Returns a map of all valid moves for pos,
   where the key is the destination,
   and the value is the jumped-over position"
  [board pos]
  (into {}
        (filter (fn [[destination jumped]]
                  (and (not (pegged? board destination))
                       (pegged? board jumped)))
                (get-in board [pos :connections]))))

;; (def my-board (assoc-in (new-board 5) [4 :pegged] false))
;; (valid-moves my-board 1)  ; => {4 2}
;; (valid-moves my-board 6)  ; => {4 5}
;; (valid-moves my-board 11) ; => {4 7}
;; (valid-moves my-board 13) ; => {4 8}
;; other positions => {}

(defn valid-move?
  "Return the jumped-over position if the move 
  from p1 to p2 is valid, nil otherwise"
  [board p1 p2]
  (get (valid-moves board p1) p2))

;; (def my-board (assoc-in (new-board 5) [4 :pegged] false))
;; (valid-move? my-board 8 4) ; => nil
;; (valid-move? my-board 1 4) ; => 2

(defn make-move
  "Move peg from p1 to p2,
   remove the peg from the jumped-over position"
  [board p1 p2]
  (if-let [jumped (valid-move? board p1 p2)]
    (move-peg (remove-peg board jumped) p1 p2)))

(defn can-move?
  "Check if there are valid moves on the board"
  [board]
  (some (comp not-empty (partial valid-moves board))
        (map first
             (filter #(get (second %) :pegged)
                     board))))

;;;;
;; Rendering the board
;;;;

(def alpha-start 97)
(def alpha-end 123)
(def letters (map (comp str char) (range alpha-start alpha-end)))
(def pos-chars 3)

(def ansi-styles
  {:red   "[31m"
   :green "[32m"
   :blue  "[34m"
   :reset "[0m"})

(defn ansi
  "Produce a string which will apply an ansi style"
  [style]
  (str \u001b (style ansi-styles)))

(defn colorize
  "Apply ansi color to text"
  [text color]
  (str (ansi color) text (ansi :reset)))

(defn render-pos
  "Use a letter to identify each position"
  [board pos]
  (str (nth letters (dec pos))
       (if (get-in board [pos :pegged])
         (colorize "0" :blue)
         (colorize "-" :red))))

(defn row-positions
  "Return all positions in the given row"
  [row-num]
  (range (inc (or (row-tri (dec row-num))
                  0))
         (inc (row-tri row-num))))

(defn row-padding
  "String of spaces to add to the beginning of a row"
  [row-num rows]
  (let [pad-length (/ (* (- rows row-num)
                         pos-chars)
                      2)]
    (apply str (take pad-length (repeat " ")))))

(defn render-row
  "Returns the string representation of the given row"
  [board row-num]
  (str (row-padding row-num (:rows board))
       (clojure.string/join " "
                            (map (partial render-pos board)
                                 (row-positions row-num)))))

(defn print-board
  [board]
  (doseq [row-num (range 1 (inc (:rows board)))]
    (println (render-row board row-num))))

;;;;
;; Player Interaction
;;;;
(defn letter->pos
  "Convert a letter string to the corresponding postion number"
  [letter]
  (inc (- (int (first letter))
          alpha-start)))

(defn get-input
  "Waits for user to enter text and hit enter, then cleans the input"
  ([] (get-input nil))
  ([default]
   (let [input (clojure.string/trim (read-line))]
     (if (empty? input)
       (default)
       (clojure.string/lower-case input)))))

(defn characters-as-strings
  "Given a string, return a collection of characters
   (with all nonalphabetic input discarded)"
  [string]
  (re-seq #"[a-zA-Z]" string))

;; (characters-as-strings "a   b")
; => ("a" "b")

(defn prompt-move
  [board]
  (println "\nHere your board:")
  (print-board board)
  (println "Move from where to where? Enter two letters:")
  (let [input (map letter->pos
                   (characters-as-strings (get-input)))]
    (if-let [new-board (make-move board (first input) (second input))]
      (successful-move new-board)
      (invalid-move board))))

(defn invalid-move
  [board]
  (println "\n!!! That was an invalid move :(\n")
  (prompt-move board))

(defn successful-move
  [board]
  (if (can-move? board)
    (prompt-move board)
    (game-over board)))

(defn game-over
  "Announce the game is over and prompt to play again"
  [board]
  (let [remaining-pegs (count (filter :pegged (vals board)))]
    (println "Game over! You had" remaining-pegs "pegs left:")
    (print-board board)
    (println "Play again? y/n [y]")
    (let [input (get-input "y")]
      (if (= "y" input)
        (prompt-rows)
        (do
          (println "Bye!")
          (System/exit 0))))))

(defn prompt-empty-peg
  [board]
  (println "Here's your board:")
  (print-board board)
  (println "Remove which peg? [e]")
  (prompt-move (remove-peg board (letter->pos (get-input "e")))))

(defn prompt-rows
  []
  (println "How many rows? [5]")
  (let [rows (Integer. (get-input 5))
        board (new-board rows)]
    (prompt-empty-peg board)))